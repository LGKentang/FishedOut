package enums.rod;

import java.util.Arrays;

public enum RodRarity {
	Default, Common, Rare, Epic, Legendary, Mythic;

	private static final int[] basePrice = { 
			0, // Default
			100, // Common
			200, // Rare
			400, // Epic
			1000, // Legendary
			2000 // Mythic
	};

	private static final double[][] probabilities = { { 0.8, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, // Default
			{ 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, // Common
			{ 0.4, 0.35, 0.2, 0.05, 0.0, 0.0, 0.0, 0.0, 0.0 }, // Rare
			{ 0.3, 0.25, 0.25, 0.15, 0.05, 0.0, 0.0, 0.0, 0.0 }, // Epic
			{ 0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1, 0.0, 0.0 }, // Legendary
			{ 0.1, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.05, 0.05 } // Mythic
	};

	private static final String[] colors = { 
			"#ADD8E6", // Default
			"#87CEEB", // Common
			"#6495ED", // Rare
			"#1E90FF", // Epic
			"#4169E1", // Legendary
			"#00008B" // Mythic
	};

	public static double[] getProbabilities(RodRarity rarity) {
		return probabilities[rarity.ordinal()];
	}

	public int getBasePrice() {
		return basePrice[this.ordinal()];
	}

	public String getColor() {
		return colors[this.ordinal()];
	}

	public static RodRarity fromString(String rarity) {
		for (RodRarity rr : RodRarity.values()) {
			if (rr.name().equalsIgnoreCase(rarity)) {
				return rr;
			}
		}
		throw new IllegalArgumentException("Invalid RodRarity: " + rarity);
	}

	static {
		// Validate array lengths
		if (basePrice.length != RodRarity.values().length || probabilities.length != RodRarity.values().length
				|| colors.length != RodRarity.values().length) {
			throw new IllegalStateException("Arrays length mismatch with RodRarity enum.");
		}
	}

	@Override
	public String toString() {
		return this.name() + " (Base Price: " + getBasePrice() + ", Color: " + getColor() + ")";
	}
}
